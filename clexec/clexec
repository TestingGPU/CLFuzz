#!/usr/bin/env python3
import argparse
import time
from libCLExec import *
import datetime


def main():
    parser = argparse.ArgumentParser(description="Execute OpenCL kernels.")
    parser.add_argument('file', metavar='kernel_file', type=str,  help="kernel file name")
    parser.add_argument('-p', metavar='platformID', type=int, help='platform ID', required=False, default=0)
    parser.add_argument('-d', metavar='deviceID', type=int, help='device ID', required=False, default=0)
    parser.add_argument('-n', metavar="num_tests", type=int, help="number of tests", required=False, default=-1)
    parser.add_argument('-select', metavar="selected_test_id", type=int, help="select a test to run", required=False,
                        default=-1)
    parser.add_argument('-t', metavar="test_file_name", type=str, help="test file name", required=False, default="")
    parser.add_argument('-schedule', metavar="schedule", type=str, help="schedule", default="", required=False)
    parser.add_argument('-cov', metavar="boolean", type=bool, help="measure coverage", default=False, required=False)

    args = parser.parse_args()
    kernel_filename = args.file
    platform_id = args.p
    device_id = args.d
    num_tests = args.n
    selected_test_id = args.select
    schedule = args.schedule
    measure_coverage = args.cov
    test_file_name = args.t

    info_filename = kernel_filename + ".yaml"

    kernel_info = parse_kernel_info(info_filename)
    time_stamp = str(int(time.time())) + str(datetime.datetime.now().strftime('%f'))

    #os.system("cp " + info_filename +" Copy_"+info_filename )
    #target_kernel = list(kernel_info.keys())[-1]
    '''
    if list(kernel_info.keys())[0] == "Cov":
        target_kernel = list(kernel_info.keys())[-1]
    elif list(kernel_info.keys())[0] == "Barriers":
        target_kernel = list(kernel_info.keys())[4]
    '''
    target_kernel = kernel_filename[:-3]
    for item in list(kernel_info.keys()):
        if item not in ["Cov","global","local","dim","Barriers","Branches","Loops","device_ID","num_parameters","num_tests","platform_ID","structure_data_filename","time_stamp"]:
            target_kernel = item
    #print(kernel_info)
    #print(target_kernel)
    kernel_info["platform_ID"] = platform_id
    kernel_info["device_ID"] = device_id
    kernel_info["num_tests"] = num_tests
    #print(kernel_info)
    schedule_from_file = None
    if schedule != "":
        schedule_from_file = np.load(schedule)

    cov = {}
    if selected_test_id != -1:
        if test_file_name == "":
            test_file_name = target_kernel + "_test" + str(selected_test_id).zfill(6) + ".npy"
        cov[selected_test_id] = execute_kernel(target_kernel, kernel_filename, kernel_info, test_file_name, time_stamp, measure_coverage, schedule_from_file)
    elif num_tests != -1:
        for i in range(num_tests):
            print("Executing " + str(i + 1) + "/" + str(num_tests))
            test_file_name = target_kernel + "_test" + str(i).zfill(6) + ".npy"
            cov[i] = execute_kernel(target_kernel, kernel_filename, kernel_info, test_file_name, time_stamp, measure_coverage, schedule_from_file)
    elif test_file_name != "":
        cov[selected_test_id] = execute_kernel(target_kernel, kernel_filename, kernel_info, test_file_name, time_stamp, measure_coverage, schedule_from_file)
    else:
        print("Provide number of tests or select one test to execute")
        exit(-1)

    if measure_coverage:
        file_name = target_kernel + "_exec_" + time_stamp
        np.save(file_name, cov)
        if selected_test_id != -1:
            cov_to_print = cov[selected_test_id]
            pretty_print_cov(cov_to_print, "detailed")
        elif num_tests != -1:
            cov_to_print = aggregate_cov(cov)
            pretty_print_cov(cov_to_print, "detailed")

"""
    if measure_coverage and num_tests != -1:
        max_branch = 0
        max_branch_id = 0
        for test_id in range(num_tests):
            cov = execute_kernel(target_kernel, kernel_filename, kernel_info, test_id)
            branch_cov = cov["branch"]
            loop_cov = cov["loop"]
            barrier_cov = cov["barrier"]

            #if(branch_cov.all()!=None):
            print("branch")
            if branch_cov is not None:
                print("Branch coverage:",branch_cov.mean()*2)
                if(branch_cov.mean()>max_branch and branch_cov.mean() <= 1 ):
                    max_branch = branch_cov.mean()
                    max_branch_id = test_id
            print(branch_cov)
            #if(loop_cov.all()!=None):
            print("loop_cov:")
            print(loop_cov)
            #if(barrier_cov.all()!=None):
            print("barrier:")
            print(barrier_cov)
            file_name = "A_covinfo_" + kernel_info["time_stamp"] + "_" + str(test_id).zfill(3) +".txt"
            f = open(file_name,'w')
            f.write("test id: "+str(test_id)+"Branch coverage:\n" + str(branch_cov) + "\n" )
            if branch_cov is not None:
                f.write(str(branch_cov.mean()*2) + "\n")
            f.write("Loop_cov:\n" + str(loop_cov) +"\n" )
            f.write("Barrier:\n" + str(barrier_cov) +"\n" )
            f.close()
            #print(loop_cov.mean())
        if kernel_info["Cov"] :
            f = open("A_"+kernel_info["time_stamp"]+"_"+str(max_branch_id)+"_.txt",'w')
            f.write("largest branch coverage test id: "+ str(max_branch_id).zfill(3)+": "+str(max_branch*2))
            f.close()
            print("largest branch coverage test id: "+ kernel_info["time_stamp"]+"_"+str(max_branch_id).zfill(3)+": "+str(max_branch*2))
"""

if __name__ == "__main__":
    main()
