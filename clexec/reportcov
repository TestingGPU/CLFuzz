#!/usr/bin/env python3
import argparse
import time
from libCLExec import *
import datetime


def main():
    parser = argparse.ArgumentParser(description="Display coverage.")
    parser.add_argument('file', metavar='coverage file', type=str,  help="kernel file name")
    args = parser.parse_args()
    filename = args.file

    cov = np.load(filename)
    pretty_print_cov(cov.item(), "detailed")

"""
    if measure_coverage and num_tests != -1:
        max_branch = 0
        max_branch_id = 0
        for test_id in range(num_tests):
            cov = execute_kernel(target_kernel, kernel_filename, kernel_info, test_id)
            branch_cov = cov["branch"]
            loop_cov = cov["loop"]
            barrier_cov = cov["barrier"]

            #if(branch_cov.all()!=None):
            print("branch")
            if branch_cov is not None:
                print("Branch coverage:",branch_cov.mean()*2)
                if(branch_cov.mean()>max_branch and branch_cov.mean() <= 1 ):
                    max_branch = branch_cov.mean()
                    max_branch_id = test_id
            print(branch_cov)
            #if(loop_cov.all()!=None):
            print("loop_cov:")
            print(loop_cov)
            #if(barrier_cov.all()!=None):
            print("barrier:")
            print(barrier_cov)
            file_name = "A_covinfo_" + kernel_info["time_stamp"] + "_" + str(test_id).zfill(3) +".txt"
            f = open(file_name,'w')
            f.write("test id: "+str(test_id)+"Branch coverage:\n" + str(branch_cov) + "\n" )
            if branch_cov is not None:
                f.write(str(branch_cov.mean()*2) + "\n")
            f.write("Loop_cov:\n" + str(loop_cov) +"\n" )
            f.write("Barrier:\n" + str(barrier_cov) +"\n" )
            f.close()
            #print(loop_cov.mean())
        if kernel_info["Cov"] :
            f = open("A_"+kernel_info["time_stamp"]+"_"+str(max_branch_id)+"_.txt",'w')
            f.write("largest branch coverage test id: "+ str(max_branch_id).zfill(3)+": "+str(max_branch*2))
            f.close()
            print("largest branch coverage test id: "+ kernel_info["time_stamp"]+"_"+str(max_branch_id).zfill(3)+": "+str(max_branch*2))
"""

if __name__ == "__main__":
    main()
